apply plugin: "com.android.application"
// apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: "io.fabric"
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: "../../package/configs.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

// the automatic removal of resources that are unused, at build time, in the packaged app
def enableShrinkResourcesInReleaseBuilds = true

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    // flavorDimensions "versionCode"

    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        // tên app
        resValue "string", "app_name", rootProject.appName
        buildConfigField "String", "APP_NAME", '"' + rootProject.appName + '"'

        resValue "string", "supportLibVersion", rootProject.supportLibVersion

        // tên component
        buildConfigField "String", "COMPONENT_NAME", '"' + rootProject.componentName + '"'

        // background geolocation maron85
        resValue "string", "account_type", rootProject.applicationId + ".account"
        resValue "string", "content_authority", rootProject.applicationId + ".authority"

        // firebase notification
        resValue "string", "default_notification_channel_id", "fcm_default_channel"
        resValue "color", "colorAccent", "#FFA000"
        
        manifestPlaceholders = [
            // onesignal
            onesignal_app_id: rootProject.onesignal_app_id,
            onesignal_google_project_number: rootProject.onesignal_google_project_number
        ]

        // GA
        resValue "string", "ga_trackingId", rootProject.ga_trackingId

        // facebook
        resValue "string", "fb_app_id", rootProject.fb_app_id
        resValue "string", "fb_login_protocol_scheme", "fb" + rootProject.fb_app_id
        resValue "string", "fb_authority", "com.facebook.FacebookContentProvider" + rootProject.fb_app_id

        // google service
        //resValue "string", "google_api_key", "AIzaSyC-i8cGSfbOy_Y0B9VB9_UwXRkOjABQP9I"
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE'
        exclude 'NOTICE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
    }
    aaptOptions {
        // additionalParameters "--no-version-vectors"
    }
    dexOptions {
        jumboMode true
        preDexLibraries = false
        incremental true
        javaMaxHeapSize "2g"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            // useProguard false
            shrinkResources false

            // code push
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_staging_key + '"'
        }

        release {
            debuggable false
            shrinkResources enableShrinkResourcesInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            zipAlignEnabled true

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

            // code push
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_production_key + '"'
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-maps')
    compile project(':react-native-camera')
    compile project(':react-native-sound')
    compile project(':stringee-react-native')
    compile project(':react-native-vector-icons')
    compile project(':react-native-smart-splash-screen')
    compile project(':react-native-onesignal')
    compile project(':react-native-image-picker')
    compile project(':react-native-google-signin')
    // compile project(':react-native-google-analytics-bridge')
    compile project(':react-native-fs')
    compile(project(':react-native-firebase')) {
        transitive = false
    }
    compile project(':react-native-fetch-blob')
    compile project(':react-native-fbsdk')
    compile project(':react-native-exception-handler')
    compile project(':react-native-device-info')
    compile project(':react-native-code-push')
    compile project(':react-native-android-sms-listener')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:$rootProject.supportLibVersion"
    compile "com.facebook.react:react-native:+"  // From node_modules

    compile project(':react-native-incall-manager')
    compile project(':react-native-call-detection')

    compile "com.android.support:multidex:1.0.3" // Degug failed for task ':app:transformClassesWithMultidexlistForDebug -- Enable Multidex for Apps with Over 64K Methods

    compile 'com.stringee.sdk.android:stringee-android-sdk:1.2.9'

    // RNFirebase required dependencies
    // compile 'com.google.firebase:firebase-perf:15.0.0'
    compile "com.google.firebase:firebase-core:16.0.0" // 15.0.0 -> 15.0.2 failed for task ':app:transformClassesWithMultidexlistForDebug'.

    // // RNFirebase optional dependencies
    // compile "com.google.firebase:firebase-ads:15.0.0"
    // compile "com.google.firebase:firebase-auth:15.0.0"
    // compile "com.google.firebase:firebase-config:15.0.2" // 15.0.0 -> 15.0.2 failed for task ':app:transformClassesWithMultidexlistForDebug'.
    compile "com.google.firebase:firebase-database:16.0.1"
    // compile "com.google.firebase:firebase-invites:15.0.1"
    compile "com.google.firebase:firebase-firestore:17.0.1" // 15.0.0 -> 16.0.0 failed for task ':app:transformClassesWithMultidexlistForDebug'.
    compile "com.google.firebase:firebase-messaging:17.0.0" // 15.0.0 -> 15.0.2 failed for task ':app:transformClassesWithMultidexlistForDebug'.
    compile 'me.leolin:ShortcutBadger:1.1.21@aar' // <-- Add this line if you wish to use badge on Android
    // compile "com.google.firebase:firebase-perf:15.1.0"
    compile "com.google.firebase:firebase-storage:16.0.1" // // 15.0.0 -> 15.0.2
    compile "com.google.firebase:firebase-crash:16.0.0" // // 15.0.0 -> 15.0.2
    
    compile('com.crashlytics.sdk.android:crashlytics:2.9.3@aar') {
        transitive = true
    }

    compile "com.google.android.gms:play-services-base:15.0.1" // 15.0.0 -> 15.0.1
    compile "com.google.android.gms:play-services-analytics:15.0.2" // Google Analytics
    compile "com.google.android.gms:play-services-identity:15.0.1" // Google Sign In
    compile "com.google.android.gms:play-services-auth:15.0.1" // Google Sign In

    // react-native-facebook-sdk
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'

    // Debugging
    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
// apply plugin: com.google.gms.googleservices.GoogleServicesPlugin